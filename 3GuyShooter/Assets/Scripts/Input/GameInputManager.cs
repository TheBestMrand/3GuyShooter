//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/GameInputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ce36fc6e-a425-42ab-a2f5-2cc8a53e76ca"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""fca9b7a1-c469-4acb-b04d-be9e3404637d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenShop"",
                    ""type"": ""Button"",
                    ""id"": ""b7dfbe0d-a987-4ada-9731-cbec145f1b6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSlot1"",
                    ""type"": ""Button"",
                    ""id"": ""60faad5f-c712-4e8d-ba78-696c9a42c37d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSlot2"",
                    ""type"": ""Button"",
                    ""id"": ""f7567516-82f2-42db-834c-bf8ee6c582a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSlot3"",
                    ""type"": ""Button"",
                    ""id"": ""206b001f-f52d-47df-9d08-1147ca2481f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b04e91fc-988d-4f01-af23-fdd29c3ce95f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standart"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b0db9ff-f998-4cb6-8691-f9dedd74ea71"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standart"",
                    ""action"": ""OpenShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2e26196-b1b6-4d8d-951d-bf3d90b93328"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standart"",
                    ""action"": ""UseSlot1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1001e1fd-9762-40f3-86b8-dbbf347c8837"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standart"",
                    ""action"": ""UseSlot2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed1b65c8-a8e9-4b3a-b3dc-add34fb2cc18"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Standart"",
                    ""action"": ""UseSlot3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Standart"",
            ""bindingGroup"": ""Standart"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_OpenShop = m_Player.FindAction("OpenShop", throwIfNotFound: true);
        m_Player_UseSlot1 = m_Player.FindAction("UseSlot1", throwIfNotFound: true);
        m_Player_UseSlot2 = m_Player.FindAction("UseSlot2", throwIfNotFound: true);
        m_Player_UseSlot3 = m_Player.FindAction("UseSlot3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_OpenShop;
    private readonly InputAction m_Player_UseSlot1;
    private readonly InputAction m_Player_UseSlot2;
    private readonly InputAction m_Player_UseSlot3;
    public struct PlayerActions
    {
        private @GameInputManager m_Wrapper;
        public PlayerActions(@GameInputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @OpenShop => m_Wrapper.m_Player_OpenShop;
        public InputAction @UseSlot1 => m_Wrapper.m_Player_UseSlot1;
        public InputAction @UseSlot2 => m_Wrapper.m_Player_UseSlot2;
        public InputAction @UseSlot3 => m_Wrapper.m_Player_UseSlot3;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @OpenShop.started += instance.OnOpenShop;
            @OpenShop.performed += instance.OnOpenShop;
            @OpenShop.canceled += instance.OnOpenShop;
            @UseSlot1.started += instance.OnUseSlot1;
            @UseSlot1.performed += instance.OnUseSlot1;
            @UseSlot1.canceled += instance.OnUseSlot1;
            @UseSlot2.started += instance.OnUseSlot2;
            @UseSlot2.performed += instance.OnUseSlot2;
            @UseSlot2.canceled += instance.OnUseSlot2;
            @UseSlot3.started += instance.OnUseSlot3;
            @UseSlot3.performed += instance.OnUseSlot3;
            @UseSlot3.canceled += instance.OnUseSlot3;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @OpenShop.started -= instance.OnOpenShop;
            @OpenShop.performed -= instance.OnOpenShop;
            @OpenShop.canceled -= instance.OnOpenShop;
            @UseSlot1.started -= instance.OnUseSlot1;
            @UseSlot1.performed -= instance.OnUseSlot1;
            @UseSlot1.canceled -= instance.OnUseSlot1;
            @UseSlot2.started -= instance.OnUseSlot2;
            @UseSlot2.performed -= instance.OnUseSlot2;
            @UseSlot2.canceled -= instance.OnUseSlot2;
            @UseSlot3.started -= instance.OnUseSlot3;
            @UseSlot3.performed -= instance.OnUseSlot3;
            @UseSlot3.canceled -= instance.OnUseSlot3;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_StandartSchemeIndex = -1;
    public InputControlScheme StandartScheme
    {
        get
        {
            if (m_StandartSchemeIndex == -1) m_StandartSchemeIndex = asset.FindControlSchemeIndex("Standart");
            return asset.controlSchemes[m_StandartSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnOpenShop(InputAction.CallbackContext context);
        void OnUseSlot1(InputAction.CallbackContext context);
        void OnUseSlot2(InputAction.CallbackContext context);
        void OnUseSlot3(InputAction.CallbackContext context);
    }
}
